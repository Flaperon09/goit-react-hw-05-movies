{"version":3,"file":"static/js/269.6ed2b9d4.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.js","services/getMoviesList_Api.js","services/getMovie_API.js","services/getMovieCast_API.js","services/getMovieReviews_API.js","services/getMoviesQuery_API.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    margin: 50px;\n`;","import { Circles } from 'react-loader-spinner';\nimport { LoaderWrapper } from './Loader.styled';\n\nexport const Loader = () => {\n    return (\n        <LoaderWrapper>\n            <Circles\n            height=\"80\"\n            width=\"80\"\n            color=\"#4fa94d\"\n            ariaLabel=\"circles-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"\"\n            visible={true}\n        />\n        </LoaderWrapper>\n\n        \n    )\n};","import styled from 'styled-components';\n\nexport const WrapperReviews = styled.div`\n    padding-top: 20px;\n`;\n\nexport const ReviewsItem = styled.li`\n    padding-bottom: 20px;\n    margin-left: 30px;\n`;\n\nexport const ReviewsAuthor = styled.h4`\n    margin-top: 0;\n    margin-bottom: 10px;\n`;","import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\nimport { getMovieReviews } from '../../services';\nimport { Loader } from \"components/Loader\";\nimport { WrapperReviews, ReviewsItem, ReviewsAuthor } from \"./Reviews.styled\";\n\nexport default function Reviews () {\n    const { id } = useParams();\n\n    const [movieReviews, setMovieReviews] = useState([]);\n    const [load, setLoad] = useState(false);\n\n    // Запрос на бекэнд\n    useEffect(() => {\n        setLoad(true);\n        getMovieReviews(id)\n            .then(response => setMovieReviews(response))\n            .finally(() => setLoad(false));\n    }, [id]);\n\n    return (\n        <WrapperReviews>\n            {load && <Loader />}\n            {/* Если нет обзоров, то выводится сообщение: \"No reviews\" */}\n            {movieReviews.length === 0\n                ? <h2>No reviews</h2>\n                :\n                <ul>\n                    {movieReviews.map(({ author, id, content }) =>\n                        <ReviewsItem key={id}>\n                            <ReviewsAuthor>Author: {author}</ReviewsAuthor>\n                            <p>{content}</p>\n                        </ReviewsItem>\n                    )}\n                </ul>\n            }\n        </WrapperReviews>\n    )\n};","import axios from 'axios';\n\n// Функция запроса на сервер списка фильмов для Home\nexport async function getMoviesList() {\n    try {\n        // Параметры поиска\n        const BASE_URL = 'https://api.themoviedb.org/3/';\n        const searchParams = new URLSearchParams({\n            api_key: '70e00eb52bcb7ab46f183ec1381bf837',\n        });\n        // Запрос на сервер\n        const response = await axios.get(`${BASE_URL}trending/all/day?${searchParams}`);\n        return response.data.results;\n    } catch (error) {\n        console.error(error);\n    }\n};\n\n\n// Функция запроса на сервер\n// export async function getPhotos(wordForSearch, startPage) {\n//     try {\n//         // Удаление времени из запроса\n//         const SearchPhrase = wordForSearch.slice(14, wordForSearch.length);\n//         // Параметры поиска\n//         const BASE_URL = 'https://pixabay.com/api/';\n//         const searchParams = new URLSearchParams({\n//             key: '2842151-bd094d52b36040a4b6da8b1da',\n//             format: 'json',\n//             q: SearchPhrase, // Поисковая фраза => Введённое слово\n//             image_type: 'photo',\n//             orientation: 'horizontal',\n//             safesearch: 'true',\n//             page: startPage,\n//             per_page: 12,\n//         });\n//         // Запрос на сервер\n//         const response = await axios.get(`${BASE_URL}?${searchParams}`);\n//         return response;\n//     } catch (error) {\n//         console.error(error);\n//     }\n// }","import axios from 'axios';\n\n// Функция запроса на сервер данных по фильму\nexport async function getMovie(id) {\n    try {\n\n        // Параметры поиска\n        const BASE_URL = 'https://api.themoviedb.org/3/';\n        const searchParams = new URLSearchParams({\n            api_key: '70e00eb52bcb7ab46f183ec1381bf837',\n        });\n\n        // Запрос на сервер\n        const response = await axios.get(`${BASE_URL}movie/${id}?${searchParams}`);\n        return response.data;\n        \n    } catch (error) {\n        // Если сервер ответил ошибкой (отсутствие данных), то возвращаем в ответе false\n        console.error(error.response.data.success);\n        return error.response.data.success;\n    }\n};","import axios from 'axios';\n\n// Функция запроса на сервер данных по фильму\nexport async function getMovieCast(id) {\n    try {\n\n        // Параметры поиска\n        const BASE_URL = 'https://api.themoviedb.org/3/';\n        const searchParams = new URLSearchParams({\n            api_key: '70e00eb52bcb7ab46f183ec1381bf837',\n        });\n\n        // Запрос на сервер\n        const response = await axios.get(`${BASE_URL}movie/${id}/credits?${searchParams}`);\n        return response.data.cast;\n        \n    } catch (error) {\n        console.error(error);\n    }\n};","import axios from 'axios';\n\n// Функция запроса на сервер данных по фильму\nexport async function getMovieReviews(id) {\n    try {\n\n        // Параметры поиска\n        const BASE_URL = 'https://api.themoviedb.org/3/';\n        const searchParams = new URLSearchParams({\n            api_key: '70e00eb52bcb7ab46f183ec1381bf837',\n        });\n\n        // Запрос на сервер\n        const response = await axios.get(`${BASE_URL}movie/${id}/reviews?${searchParams}`);\n        return response.data.results;\n        \n    } catch (error) {\n        console.error(error);\n    }\n};","import axios from 'axios';\n\n// Функция запроса на сервер списка фильмов для Home\nexport async function getMoviesQuery(keyword) {\n    try {\n        // Параметры поиска\n        const BASE_URL = 'https://api.themoviedb.org/3/';\n        const searchParams = new URLSearchParams({\n            api_key: '70e00eb52bcb7ab46f183ec1381bf837',\n            query: keyword,\n        });\n        // Запрос на сервер\n        const response = await axios.get(`${BASE_URL}search/movie?${searchParams}`);\n        return response.data.results;\n    } catch (error) {\n        console.error(error);\n    }\n};"],"names":["LoaderWrapper","styled","_templateObject","_taggedTemplateLiteral","Loader","_jsx","children","Circles","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","WrapperReviews","ReviewsItem","_templateObject2","ReviewsAuthor","_templateObject3","Reviews","id","useParams","_useState","useState","_useState2","_slicedToArray","movieReviews","setMovieReviews","_useState3","_useState4","load","setLoad","useEffect","getMovieReviews","then","response","finally","_jsxs","length","map","_ref","author","content","getMoviesList","_getMoviesList","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","searchParams","_context","prev","next","URLSearchParams","api_key","axios","concat","sent","abrupt","data","results","t0","console","error","stop","getMovie","_x","_getMovie","success","getMovieCast","_getMovieCast","cast","_getMovieReviews","getMoviesQuery","_getMoviesQuery","keyword","query"],"sourceRoot":""}